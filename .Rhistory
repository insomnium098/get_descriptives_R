}
test <- prepare_dataframe(data4, NULL, cnames) #Null colname
test
test <- prepare_dataframe(data4, "state", cnames)
#Define prepare_dataframe function
prepare_dataframe <- function(df, colname, cnames){
#Converts the dataframe to a list of dataframes for each cohort. This functions feed to prepare_dataframe_list
list_df <- list()
if (is.null(colname)){
warning("Name of the cohort column is not specified. Therefore, the data is assumed to be from a single cohort")
cohort_names <- assign_cohort_name(cnames, 1)
list_df <- (list(df))
} else {
##We find the column specified,#We need to make a case where the column doesnt exist
indexColname <- which(colnames(df) == colname)
cohort_names <- unique(df[,indexColname])
for (i in cohort_names){
tmp <- df[df[, indexColname] == i,]
tmp <- tmp[-c(indexColname)]
#append(list_df, tmp)
list_df <- c(list(list_df), tmp)
}
}
return(list(list_df, cohort_names))
}
test <- prepare_dataframe(data4, "state", cnames)
test
test[0]
test[1]
tmp
#Define prepare_dataframe function
prepare_dataframe <- function(df, colname, cnames){
#Converts the dataframe to a list of dataframes for each cohort. This functions feed to prepare_dataframe_list
list_df <- list()
if (is.null(colname)){
warning("Name of the cohort column is not specified. Therefore, the data is assumed to be from a single cohort")
cohort_names <- assign_cohort_name(cnames, 1)
list_df <- (list(df))
} else {
##We find the column specified,#We need to make a case where the column doesnt exist
indexColname <- which(colnames(df) == colname)
cohort_names <- unique(df[,indexColname])
for (i in cohort_names){
tmp <- df[df[, indexColname] == i,]
tmp <- tmp[-c(indexColname)]
#append(list_df, tmp)
list_df <- c(list_df, tmp)
}
}
return(list(list_df, cohort_names))
}
test <- prepare_dataframe(data4, "state", cnames)
test
#Define prepare_dataframe function
prepare_dataframe <- function(df, colname, cnames){
#Converts the dataframe to a list of dataframes for each cohort. This functions feed to prepare_dataframe_list
list_df <- list()
if (is.null(colname)){
warning("Name of the cohort column is not specified. Therefore, the data is assumed to be from a single cohort")
cohort_names <- assign_cohort_name(cnames, 1)
list_df <- (list(df))
} else {
##We find the column specified,#We need to make a case where the column doesnt exist
indexColname <- which(colnames(df) == colname)
cohort_names <- unique(df[,indexColname])
for (i in cohort_names){
tmp <- df[df[, indexColname] == i,]
tmp <- tmp[-c(indexColname)]
#append(list_df, tmp)
list_df <- c(list_df, list(tmp))
}
}
return(list(list_df, cohort_names))
}
test <- prepare_dataframe(data4, "state", cnames)
test
list(cohort_names)
list(cohort_names)[1]
list(cohort_names)[2]
#Define prepare_dataframe function
prepare_dataframe <- function(df, colname, cnames){
#Converts the dataframe to a list of dataframes for each cohort. This functions feed to prepare_dataframe_list
list_df <- list()
if (is.null(colname)){
warning("Name of the cohort column is not specified. Therefore, the data is assumed to be from a single cohort")
cohort_names <- assign_cohort_name(cnames, 1)
list_df <- (list(df))
} else {
##We find the column specified,#We need to make a case where the column doesnt exist
indexColname <- which(colnames(df) == colname)
cohort_names <- unique(df[,indexColname])
tmp_cohort_name <- list()
for (i in cohort_names){
tmp <- df[df[, indexColname] == i,]
tmp <- tmp[-c(indexColname)]
#append(list_df, tmp)
list_df <- c(list_df, list(tmp))
tmp_cohort_name <- c(tmp_cohort_name, i)
}
cohort_names <- tmp_cohort_name
}
return(list(list_df, cohort_names))
}
test <- prepare_dataframe(data4, "state", cnames)
test
prepare_dataframe(data4, NULL, cnames) #Null colname
cohort_names <- assign_cohort_name(cnames, 1)
cohort_names
strsplit(cohort_names)
strsplit(cohort_names, " ")
list(strsplit(cohort_names, " "))
type_sum(strsplit(cohort_names, " ")
)
#Define prepare_dataframe function
prepare_dataframe <- function(df, colname, cnames){
#Converts the dataframe to a list of dataframes for each cohort. This functions feed to prepare_dataframe_list
list_df <- list()
if (is.null(colname)){
warning("Name of the cohort column is not specified. Therefore, the data is assumed to be from a single cohort")
cohort_names <- assign_cohort_name(cnames, 1)
cohort_names <- strsplit(cohort_names, " ")
list_df <- (list(df))
} else {
##We find the column specified,#We need to make a case where the column doesnt exist
indexColname <- which(colnames(df) == colname)
cohort_names <- unique(df[,indexColname])
tmp_cohort_name <- list()
for (i in cohort_names){
tmp <- df[df[, indexColname] == i,]
tmp <- tmp[-c(indexColname)]
#append(list_df, tmp)
list_df <- c(list_df, list(tmp))
tmp_cohort_name <- c(tmp_cohort_name, i)
}
cohort_names <- tmp_cohort_name
}
return(list(list_df, cohort_names))
}
prepare_dataframe(data4, NULL, cnames) #Null colname
test <- prepare_dataframe(data4, "state", cnames)
test
View(data4)
source('~/Documents/GithubProjects/get_descriptives_R/_iter_prepare_dataframe_cols.R')
test_list <- list(read.csv("df_list.csv", row.names = 1))
test <- iter_prepare_dataframe_cols(test_list)
df_proc <- test[0]
df_proc <- test[1]
df_proc
test[2]
build_ordinal_type <- function(values){
##Builds customized category datatype. Needed to indicate ordinal values.
##Returns as.factor() ordered
return(factor(values, ordered=TRUE))
}
build_ordinal_type(c(5,6,7,8))
build_ordinal_type(c(9,6,7,8))
build_ordinal_type(c(9,6,7,82))
build_ordinal_type(c(92,6,7,82))
df_proc
build_ordinal_type(c(92,6,7,82))
####Factors
birth_factor <- build_ordinal_type(data4$birth_year)
birth_factor
category <- list("birth_year", birth_factor)
category
str(data4)
a <- str(data4)
a
a <- str(data4)
?str
levels(data4$birth_year)
sapply(data4, typeof)
a <- sapply(data4, typeof)
a
a[1]
for (i in a){
print(i)
}
data4$birth_year <- build_ordinal_type(data4$birth_year)
a <- sapply(data4, typeof)
for (i in a){
print(i)
}
a[1]
a[2]
a <- sapply(data4, typeof)
sapply(data4, typeof)
levels(data4$birth_year)
glimpse(data4)
a <- glimpse(data4)
View(a)
rm(A)
rm(A)
rm(a)
sapply(data4, class)
list(c("birthday"), as.factor(data4$birth_year))
(c("birthday"), as.factor(data4$birth_year))
c("birthday"), as.factor(data4$birth_year)
c("birthday", as.factor(data4$birth_year))
list(c("birthday", as.factor(data4$birth_year)))
list(c("birthday"), as.factor(data4$birth_year))
as.factor(data4$birth_year)
levels(as.factor(data4$birth_year))
install.packages("collections")
library(collections)
birth_factor
birth_dict <- dict("birth_year", birth_factor)
birth_dict <- dict("birth_year", levels(birth_factor))
birth_dict
birth_dict <- dict("birth_year", "a")
birth_dict
birth_dict$get("birth_year")
birth_dict <- dict("birth_year", levels(birth_factor))
birth_dict$keys
birth_dict <- dict(list("banana" = 3))
birth_dict$keys
birth_dict$values
d <- dict(list(apple = 5, orange = 10))
d$keys()
birth_dict <- dict(list(banana = 3))
birth_dict$keys
birth_dict$keys()
birth_dict <- dict("birth_year", levels(birth_factor))
birth_dict$keys()
levels(birth_factor)
birth_dict$values()
birth_dict <- dict(levels(birth_factor),"birth_year")
birth_dict$values()
birth_dict$keys()
a <- sapply(data4, class)
a$person_id
iter_map_dtypes <- function(df_list, col_dtypes = NULL){
#"""Iterates through the data list and calls _map_dtypes()."""
###By how R functions, this function will only allow
##to process a column as an factor
##dtypes is a character vector indicating which columns should be converted
##in factor
mapped <- list()
for (df in df_list){
mapped <- c(mapped, list(map_dtypes(df, col_dtypes)))
}
##The second element is the type of the columns
###sapply(data4, class)
return(list(mapped, cohort_names))
}
map_dtypes <- function(df, col_dtypes = NULL){
if(is.null(df)){
return(df)
} else{
print("o")
}
}
df_proc
###Test function
iter_map_dtypes(df_proc)
df_proc
map_dtypes <- function(df, col_dtypes = NULL){
if(is.null(df)){
return(df)
} else{
#print("o")
}
}
###Test function
iter_map_dtypes(df_proc)
coltypes <- c("birth_year")
df_proc
df_proc[1]
View(df_proc)
df_proc[1][1]
df_proc[1][1][1]
df_proc[[1]]
df_proc[[1]]$birth_year
df_proc[1]$birth_year
for (df in test){
print(df)
}
for (df in test[1]){
print(df)
}
for (df in test[1]){
print(df$person_id)
}
for (df in test[1]){
print(data.frame(df))
}
df <- test[1]
df <- data.frame(df)
columns_names <- colnames(df)
1:ncol(df)
colnames(df)
col_dtypes <- c("birth_year", "gender")
i <- 2
colnames(df)[i]
colnames(df)[i] %in% col_dtypes
df[,i]
build_ordinal_type(df[,i])
map_dtypes <- function(df, col_dtypes = NULL){
if(is.null(df)){
return(df)
} else{
df <- data.frame(df)
for (i in 1:ncol){
if(colnames(df)[i] %in% col_dtypes){
df[,i] <- build_ordinal_type(df[,i])
}
}
}
return(df)
}
###df_proc is the first list resulting from iter_prepare_dataframe_cols
iter_map_dtypes <- function(df_list, col_dtypes = NULL){
#"""Iterates through the data list and calls _map_dtypes()."""
###By how R functions, this function will only allow
##to process a column as an factor
##dtypes is a character vector indicating which columns should be converted
##in factor
mapped <- list()
for (df in df_list){
mapped <- c(mapped, list(map_dtypes(df, col_dtypes)))
}
##The second element is the type of the columns
###sapply(data4, class)
return(list(mapped, cohort_names))
}
test_list <- list(read.csv("df_list.csv", row.names = 1))
test <- iter_prepare_dataframe_cols(test_list)
df_proc <- test[1]
###Test function
iter_map_dtypes(df_proc)
df_proc <- test[1]
df_proc
###Test function
iter_map_dtypes(df_proc)
map_dtypes <- function(df, col_dtypes = NULL){
if(is.null(col_dtypes)){
return(df)
} else{
df <- data.frame(df)
for (i in 1:ncol){
if(colnames(df)[i] %in% col_dtypes){
df[,i] <- build_ordinal_type(df[,i])
}
}
}
return(df)
}
test_list <- list(read.csv("df_list.csv", row.names = 1))
test <- iter_prepare_dataframe_cols(test_list)
df_proc <- test[1]
###Test function
iter_map_dtypes(df_proc)
coltypes <- c("birth_year", "gender")
iter_map_dtypes(df_proc, coltypes)
coltypes <- c("birth_year", "gender")
map_dtypes <- function(df, col_dtypes = NULL){
if(is.null(col_dtypes)){
return(df)
} else{
df <- data.frame(df)
for (i in 1:ncol(df)){
if(colnames(df)[i] %in% col_dtypes){
df[,i] <- build_ordinal_type(df[,i])
}
}
}
return(df)
}
test_list <- list(read.csv("df_list.csv", row.names = 1))
test <- iter_prepare_dataframe_cols(test_list)
df_proc <- test[1]
###Test function
iter_map_dtypes(df_proc)
coltypes <- c("birth_year", "gender")
iter_map_dtypes(df_proc, coltypes)
test2 <- iter_map_dtypes(df_proc, coltypes)
test3 <- test2[1]
test3
as.data.frame(test3)
test3 <- as.data.frame(test2[1])
str(test3)
install.packages("qwraps2")
library(qwraps2)
View(test3)
summary_table(test3)
?summary_table
knitr::opts_chunk$set(echo = TRUE)
#summary(cars)
df <- read.csv("data4.csv", row.names = 1)
#summary(cars)
df <- read.csv("data4.csv", row.names = 1)
summary_table(df)
#summary(cars)
library(qwraps2)
df <- read.csv("data4.csv", row.names = 1)
summary_table(df)
options(qwraps2_markup = "markdown")
summary_table(df)
a <- summary_table(test3)
a
list(paste0("aaa"))
View(df)
View(data4)
our_summary1 <-
list("Birth Year" =
list("min"       = ~ min(birth_year),
"max"       = ~ max(birth_year),
"mean (sd)" = ~ qwraps2::mean_sd(birth_year))
)
summary_table(data4, our_summary1)
our_summary1 <-
list("Person_id" =
list("min"       = ~ min(person_id),
"max"       = ~ max(person_id),
"mean (sd)" = ~ qwraps2::mean_sd(person_id))
)
summary_table(data4, our_summary1)
min(data4$person_id)
our_summary1
test_func <- function(variable){
a
``return a`
test_func <- function(variable){
func <- list("Person_id" =
list("min"       = ~ min(paste0(variable)),
"max"       = ~ max(paste0(variable)),
"mean (sd)" = ~ qwraps2::mean_sd(paste0(variable))
))
return(func)
}
test_func("person_id")
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(variable1),
"max"       = ~ max(paste0(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func("person_id")
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(variable1),
"max"       = ~ max(paste(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func("person_id")
substitute("person_id")
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(substitute("person_id")),
"max"       = ~ max(paste(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func("person_id")
eval("person_id")
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(eval("person_id")),
"max"       = ~ max(paste(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func("person_id")
test_func("ds")
a <- summary_table(data4, our_summary1)
View(a)
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(eval("person_id")),
"max"       = ~ max(paste(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func("person_id")
colname(data4)
colnames(data4)
our_summary1 <-
list("Person_id" =
list("min"       = ~ min(data4[,2]),
"max"       = ~ max(data4[,2]),
"mean (sd)" = ~ qwraps2::mean_sd(data4[,2]))
)
a <- summary_table(data4, our_summary1)
a
data4[,2]
View(data4)
data4$birth_year <- as.numeric(data4$birth_year)
our_summary1 <-
list("Person_id" =
list("min"       = ~ min(data4[,2]),
"max"       = ~ max(data4[,2]),
"mean (sd)" = ~ qwraps2::mean_sd(data4[,2]))
)
a <- summary_table(data4, our_summary1)
View(a)
View(data4)
test_func <- function(variable1){
func <- list("Person_id" =
list("min"       = ~ min(eval("person_id")),
"max"       = ~ max(paste(variable1)),
"mean (sd)" = ~ qwraps2::mean_sd(variable1)
))
return(func)
}
test_func(data4[,2])
